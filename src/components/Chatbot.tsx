import { useState, useRef, useEffect } from 'react';
import { GoogleGenerativeAI } from '@google/generative-ai';
import './Chatbot.css';

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'bot';
  timestamp: Date;
}

const FAQS_CONTEXT = `
Eres un asistente virtual de Siempre WiFi, una empresa que ofrece planes de eSIM para viajeros internacionales.

INFORMACI√ìN DE LA EMPRESA:
- Nombre: Siempre WiFi
- Servicio: eSIM y SIM f√≠sica para datos m√≥viles internacionales
- Cobertura: M√°s de 150 pa√≠ses en todo el mundo
- Planes: Datos ilimitados desde $15 USD por d√≠a

PREGUNTAS FRECUENTES (FAQs):

1. ¬øQu√© es una eSIM?
Una eSIM es una tarjeta SIM digital que te permite activar un plan de datos m√≥viles sin necesidad de una tarjeta SIM f√≠sica. Se activa directamente desde tu dispositivo compatible.

2. ¬øC√≥mo funciona?
- Compras tu plan en nuestro sitio web
- Recibes un c√≥digo QR por email
- Escaneas el c√≥digo QR con tu dispositivo
- Tu eSIM se activa autom√°ticamente cuando llegas a tu destino

3. ¬øMi tel√©fono es compatible?
La mayor√≠a de los iPhone (XS y posteriores), Samsung Galaxy (S20 y posteriores), Google Pixel (3 y posteriores) y otros smartphones modernos son compatibles. Verifica en la configuraci√≥n de tu tel√©fono si tiene opci√≥n de eSIM.

4. ¬øCu√°ndo se activa mi plan?
Tu plan se activa autom√°ticamente cuando llegas a tu destino y tu dispositivo se conecta a la red local. No se activa antes de tu viaje.

5. ¬øPuedo usar mi n√∫mero actual?
S√≠, tu n√∫mero actual permanece activo. La eSIM es una l√≠nea adicional solo para datos m√≥viles. Puedes recibir llamadas y mensajes en tu n√∫mero principal.

6. ¬øQu√© incluyen los planes?
- Datos m√≥viles ilimitados
- Cobertura en el pa√≠s seleccionado
- Activaci√≥n instant√°nea
- Soporte 24/7
- Sin contratos ni compromisos

7. ¬øCu√°nto cuesta?
Los planes comienzan desde $15 USD por d√≠a, dependiendo del destino y la duraci√≥n de tu viaje.

8. ¬øNecesito desinstalar algo despu√©s?
No, puedes mantener la eSIM en tu dispositivo o eliminarla f√°cilmente desde la configuraci√≥n cuando termines tu viaje.

9. ¬øQu√© pasa si tengo problemas?
Ofrecemos soporte 24/7 por chat, email y WhatsApp. Nuestro equipo est√° disponible para ayudarte en cualquier momento.

10. ¬øPuedo compartir datos?
S√≠, puedes usar tu tel√©fono como hotspot para compartir datos con otros dispositivos.

DESTINOS POPULARES:
- Espa√±a, Francia, Italia, Alemania (Europa)
- Estados Unidos, Canad√°, M√©xico (Am√©rica del Norte)
- Jap√≥n, Corea del Sur, Tailandia (Asia)
- Y m√°s de 150 pa√≠ses adicionales

TONO DE COMUNICACI√ìN:
- Amigable y cercano
- Profesional pero no formal
- Usa emojis ocasionalmente (‚úàÔ∏è, üì±, üåç)
- Responde en espa√±ol claro y conciso
- Si no sabes algo, ofrece contactar al equipo de soporte

INSTRUCCIONES:
- Responde preguntas sobre eSIM, planes, cobertura y activaci√≥n
- Si te preguntan por un destino espec√≠fico, confirma que tenemos cobertura
- Si te preguntan por precios, menciona que comienzan desde $15/d√≠a
- Siempre ofrece ayuda adicional al final de tu respuesta
- Mant√©n respuestas cortas (2-3 p√°rrafos m√°ximo)
`;

function Chatbot() {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: '¬°Hola! üëã Soy el asistente virtual de Siempre WiFi. ¬øEn qu√© puedo ayudarte hoy?',
      sender: 'bot',
      timestamp: new Date()
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (isOpen && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isOpen]);

  const sendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputValue,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    try {
      const genAI = new GoogleGenerativeAI(import.meta.env.VITE_GEMINI_API_KEY);
      const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash-exp' });

      const chat = model.startChat({
        history: [
          {
            role: 'user',
            parts: [{ text: FAQS_CONTEXT }]
          },
          {
            role: 'model',
            parts: [{ text: 'Entendido. Estoy listo para ayudar a los clientes de Siempre WiFi con informaci√≥n sobre eSIM, planes y cobertura internacional.' }]
          }
        ],
        generationConfig: {
          maxOutputTokens: 500,
          temperature: 0.7,
        },
      });

      const result = await chat.sendMessage(inputValue);
      const response = await result.response;
      const botText = response.text();

      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: botText,
        sender: 'bot',
        timestamp: new Date()
      };

      setMessages(prev => [...prev, botMessage]);
    } catch (error) {
      console.error('Error al enviar mensaje:', error);
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: 'Lo siento, hubo un error al procesar tu mensaje. Por favor, intenta de nuevo o contacta a nuestro equipo de soporte.',
        sender: 'bot',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsTyping(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const quickReplies = [
    '¬øQu√© es una eSIM?',
    '¬øC√≥mo funciona?',
    'Ver planes',
    'Pa√≠ses disponibles'
  ];

  const handleQuickReply = (reply: string) => {
    setInputValue(reply);
    setTimeout(() => sendMessage(), 100);
  };

  const clearHistory = () => {
    setMessages([
      {
        id: '1',
        text: '¬°Hola! üëã Soy el asistente virtual de Siempre WiFi. ¬øEn qu√© puedo ayudarte hoy?',
        sender: 'bot',
        timestamp: new Date()
      }
    ]);
  };

  return (
    <>
      {/* Badge - Outside FAB */}
      {!isOpen && <span className="chatbot-badge">1</span>}
      
      {/* FAB Button */}
      <button
        className={`chatbot-fab ${isOpen ? 'open' : ''}`}
        onClick={() => setIsOpen(!isOpen)}
        aria-label="Abrir chat"
      >
        {isOpen ? (
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
            <path d="M18 6L6 18M6 6l12 12" />
          </svg>
        ) : (
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
            <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z" />
          </svg>
        )}
      </button>

      {/* Chat Window */}
      {isOpen && (
        <div className="chatbot-window">
          {/* Header */}
          <div className="chatbot-header">
            <div className="chatbot-header-info">
              <div className="chatbot-avatar">
                <span>S</span>
              </div>
              <div className="chatbot-header-text">
                <h3>Siempre WiFi</h3>
                <p>Asistente Virtual ‚Ä¢ En l√≠nea</p>
              </div>
            </div>
            <div className="chatbot-header-actions">
              <button
                className="chatbot-clear"
                onClick={clearHistory}
                aria-label="Nueva conversaci√≥n"
                title="Nueva conversaci√≥n"
              >
                <svg width="20" height="20" viewBox="0 0 20 20" fill="none" stroke="currentColor" strokeWidth="2">
                  <path d="M3 6h14M8 6V4a1 1 0 011-1h2a1 1 0 011 1v2m3 0v10a2 2 0 01-2 2H7a2 2 0 01-2-2V6h10z" />
                </svg>
              </button>
              <button
                className="chatbot-close"
                onClick={() => setIsOpen(false)}
                aria-label="Cerrar chat"
              >
                <svg width="20" height="20" viewBox="0 0 20 20" fill="none" stroke="currentColor" strokeWidth="2">
                  <path d="M15 5L5 15M5 5l10 10" />
                </svg>
              </button>
            </div>
          </div>

          {/* Messages */}
          <div className="chatbot-messages">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`chatbot-message ${message.sender === 'user' ? 'user' : 'bot'}`}
              >
                {message.sender === 'bot' && (
                  <div className="message-avatar">
                    <span>S</span>
                  </div>
                )}
                <div className="message-bubble">
                  <p>{message.text}</p>
                  <span className="message-time">
                    {message.timestamp.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' })}
                  </span>
                </div>
              </div>
            ))}

            {isTyping && (
              <div className="chatbot-message bot">
                <div className="message-avatar">
                  <span>S</span>
                </div>
                <div className="message-bubble typing">
                  <div className="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
            )}

            <div ref={messagesEndRef} />
          </div>

          {/* Quick Replies */}
          {messages.length <= 2 && (
            <div className="chatbot-quick-replies">
              {quickReplies.map((reply, index) => (
                <button
                  key={index}
                  className="quick-reply-btn"
                  onClick={() => handleQuickReply(reply)}
                >
                  {reply}
                </button>
              ))}
            </div>
          )}

          {/* Input */}
          <div className="chatbot-input-container">
            <input
              ref={inputRef}
              type="text"
              className="chatbot-input"
              placeholder="Escribe tu mensaje..."
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={handleKeyPress}
              disabled={isTyping}
            />
            <button
              className="chatbot-send"
              onClick={sendMessage}
              disabled={!inputValue.trim() || isTyping}
              aria-label="Enviar mensaje"
            >
              <svg width="20" height="20" viewBox="0 0 20 20" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M18 2L9 11M18 2l-6 16-3-7-7-3 16-6z" />
              </svg>
            </button>
          </div>
        </div>
      )}
    </>
  );
}

// Fix para TypeScript: declarar la propiedad 'env' en ImportMeta

declare global {
  interface ImportMeta {
    env: {
      VITE_GEMINI_API_KEY: string;
      // Puedes agregar otras variables si las necesitas
    };
  }
}

export default Chatbot;
